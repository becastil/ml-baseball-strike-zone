version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: fintech-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-fintech}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-fintech123}
      POSTGRES_DB: ${POSTGRES_DB:-fintech_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - fintech-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-fintech}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: fintech-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123}
    ports:
      - "6379:6379"
    networks:
      - fintech-network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fintech-backend
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-fintech}:${POSTGRES_PASSWORD:-fintech123}@postgres:5432/${POSTGRES_DB:-fintech_db}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here}
      API_KEY: ${API_KEY:-your-api-key}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000}
    volumes:
      - ./backend:/app
      - ./data:/app/data
    ports:
      - "8000:8000"
    networks:
      - fintech-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: fintech-frontend
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:8000}
      REACT_APP_WS_URL: ${REACT_APP_WS_URL:-ws://localhost:8000}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    networks:
      - fintech-network
    depends_on:
      - backend
    command: npm start

  # ML Engine
  ml_engine:
    build:
      context: ./ml_engine
      dockerfile: Dockerfile
    container_name: fintech-ml-engine
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-fintech}:${POSTGRES_PASSWORD:-fintech123}@postgres:5432/${POSTGRES_DB:-fintech_db}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      MODEL_PATH: ${MODEL_PATH:-/app/models}
    volumes:
      - ./ml_engine:/app
      - ./data:/app/data
      - ml_models:/app/models
    networks:
      - fintech-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: fintech-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - fintech-network
    depends_on:
      - backend
      - frontend
    profiles:
      - production

networks:
  fintech-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  ml_models: